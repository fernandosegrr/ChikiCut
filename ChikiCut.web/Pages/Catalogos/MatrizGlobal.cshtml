@page
@model ChikiCut.web.Pages.Catalogos.MatrizGlobalModel
@{
    ViewData["Title"] = "Matriz Global de Asignaciones";
}

<div class="page-header mb-4">
    <div class="row align-items-center">
        <div class="col">
            <h1><i class="bi bi-grid-3x3-gap me-2"></i>Matriz Global de Asignaciones</h1>
            <p class="text-muted">Vista completa de todas las asignaciones de productos y servicios</p>
        </div>
        <div class="col-auto">
            <div class="btn-group" role="group">
                <a asp-page="../Productos/Index" class="btn btn-outline-primary">
                    <i class="bi bi-box-seam me-1"></i>Productos
                </a>
                <a asp-page="../Servicios/Index" class="btn btn-outline-success">
                    <i class="bi bi-scissors me-1"></i>Servicios
                </a>
                <a asp-page="../Sucursales/Index" class="btn btn-outline-info">
                    <i class="bi bi-building me-1"></i>Sucursales
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Estadísticas Generales -->
<div class="row g-3 mb-4">
    <div class="col-lg-3 col-md-6">
        <div class="card bg-primary text-white h-100">
            <div class="card-body text-center">
                <i class="bi bi-diagram-3 display-6 mb-2"></i>
                <h3 class="card-title">@Model.Estadisticas.CoberturalPromedio.ToString("F1")%</h3>
                <p class="card-text mb-0">Cobertura Promedio</p>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="card bg-success text-white h-100">
            <div class="card-body text-center">
                <i class="bi bi-box-seam display-6 mb-2"></i>
                <h3 class="card-title">@Model.Estadisticas.TotalProductos</h3>
                <p class="card-text mb-0">Total Productos</p>
                <small>@Model.Estadisticas.ProductosConAsignaciones con asignaciones</small>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="card bg-info text-white h-100">
            <div class="card-body text-center">
                <i class="bi bi-scissors display-6 mb-2"></i>
                <h3 class="card-title">@Model.Estadisticas.TotalServicios</h3>
                <p class="card-text mb-0">Total Servicios</p>
                <small>@Model.Estadisticas.ServiciosConAsignaciones con asignaciones</small>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="card bg-warning text-white h-100">
            <div class="card-body text-center">
                <i class="bi bi-building display-6 mb-2"></i>
                <h3 class="card-title">@Model.Estadisticas.TotalSucursales</h3>
                <p class="card-text mb-0">Total Sucursales</p>
                <small>@(Model.Estadisticas.TotalAsignacionesProductos + Model.Estadisticas.TotalAsignacionesServicios) asignaciones</small>
            </div>
        </div>
    </div>
</div>

<!-- Filtros y Controles -->
<div class="card mb-4">
    <div class="card-header">
        <i class="bi bi-funnel me-2"></i><strong>Filtros y Vista</strong>
    </div>
    <div class="card-body">
        <form method="get" id="filtrosForm">
            @Html.AntiForgeryToken()
            <div class="row g-3 align-items-end">
                <div class="col-md-2">
                    <label class="form-label">Vista</label>
                    <select name="tipo" class="form-select" onchange="document.getElementById('filtrosForm').submit()">
                        <option value="productos" selected="@(Model.TipoVista == "productos")">Solo Productos</option>
                        <option value="servicios" selected="@(Model.TipoVista == "servicios")">Solo Servicios</option>
                        <option value="ambos" selected="@(Model.TipoVista == "ambos")">Ambos</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Búsqueda</label>
                    <input name="search" value="@Model.SearchString" class="form-control" 
                           placeholder="Nombre, código...">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Categoría</label>
                    <select name="categoria" class="form-select">
                        <option value="">Todas</option>
                        @if (Model.TipoVista == "productos" || Model.TipoVista == "ambos")
                        {
                            @foreach (var categoria in Model.ProductosMatriz.Select(p => p.Producto.Categoria).Distinct().OrderBy(c => c))
                            {
                                <option value="@categoria" selected="@(Model.CategoriaFilter == categoria)">@categoria</option>
                            }
                        }
                        @if (Model.TipoVista == "servicios" || Model.TipoVista == "ambos")
                        {
                            @foreach (var categoria in Model.ServiciosMatriz.Select(s => s.Servicio.Categoria).Distinct().OrderBy(c => c))
                            {
                                <option value="@categoria" selected="@(Model.CategoriaFilter == categoria)">@categoria</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Estado</label>
                    <select name="soloConAsignaciones" class="form-select">
                        <option value="">Todos</option>
                        <option value="true" selected="@Model.SoloConAsignaciones">Con asignaciones</option>
                        <option value="false" selected="@Model.SoloSinAsignaciones">Sin asignaciones</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-search me-1"></i>Filtrar
                    </button>
                </div>
                <div class="col-md-2">
                    <a asp-page="MatrizGlobal" class="btn btn-outline-secondary w-100">
                        <i class="bi bi-arrow-clockwise me-1"></i>Limpiar
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Herramientas Masivas -->
<div class="card mb-4">
    <div class="card-header">
        <i class="bi bi-tools me-2"></i><strong>Herramientas Masivas</strong>
    </div>
    <div class="card-body">
        <div class="row g-3 align-items-center">
            <div class="col-md-3">
                <div class="text-center">
                    <div class="badge bg-primary fs-6 mb-2" id="contadorSeleccionados">0 seleccionados</div>
                    <div class="small text-muted">Selecciona elementos usando los checkboxes</div>
                </div>
            </div>
            <div class="col-md-3">
                <button type="button" class="btn btn-success w-100" onclick="abrirAsignacionMasiva('asignar')" id="btnAsignar">
                    <i class="bi bi-plus-circle me-1"></i>Asignación Masiva
                </button>
            </div>
            <div class="col-md-3">
                <button type="button" class="btn btn-warning w-100" onclick="abrirAsignacionMasiva('desasignar')" id="btnDesasignar">
                    <i class="bi bi-x-circle me-1"></i>Desasignación Masiva
                </button>
            </div>
            <div class="col-md-3">
                <button type="button" class="btn btn-info w-100" onclick="exportarMatriz()">
                    <i class="bi bi-download me-1"></i>Exportar Matriz
                </button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <div class="d-flex gap-2 justify-content-center">
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="seleccionarTodosVisible()">
                        <i class="bi bi-check-all me-1"></i>Seleccionar Todos los Visibles
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="limpiarSeleccion()">
                        <i class="bi bi-x-circle me-1"></i>Limpiar Selección
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Matriz de Productos -->
@if (Model.TipoVista == "productos" || Model.TipoVista == "ambos")
{
    <div class="card mb-4">
        <div class="card-header">
            <i class="bi bi-box-seam me-2"></i><strong>Matriz de Productos (@Model.ProductosMatriz.Count)</strong>
        </div>
        <div class="card-body p-0">
            @if (Model.ProductosMatriz.Any())
            {
                <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                        <thead class="table-dark sticky-top">
                            <tr>
                                <th width="50px">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="selectAllProductos" onchange="toggleSelectAllProductos()">
                                    </div>
                                </th>
                                <th width="300px">Producto</th>
                                <th width="120px">Cobertura</th>
                                <th width="150px">Rango Precio</th>
                                @foreach (var sucursal in Model.SucursalesDisponibles)
                                {
                                    <th width="80px" class="text-center sucursal-header" title="@sucursal.Name">
                                        <div class="sucursal-name">@(sucursal.Name?.Substring(0, Math.Min(8, sucursal.Name?.Length ?? 0)) ?? "N/A")</div>
                                        <small class="text-muted">@sucursal.Code</small>
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var producto in Model.ProductosMatriz)
                            {
                                <tr data-tipo="producto" data-id="@producto.Producto.Id">
                                    <td>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input item-checkbox producto-checkbox" 
                                                   value="@producto.Producto.Id">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(producto.Producto.ImagenPrincipalUrl))
                                            {
                                                <img src="@producto.Producto.ImagenPrincipalUrl" alt="@producto.Producto.Nombre" 
                                                     class="rounded me-2" style="width: 30px; height: 30px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <div class="bg-light rounded me-2 d-flex align-items-center justify-content-center" 
                                                     style="width: 30px; height: 30px;">
                                                    <i class="bi bi-box text-muted small"></i>
                                                </div>
                                            }
                                            <div>
                                                <div class="fw-bold small">@producto.Producto.Nombre</div>
                                                <small class="text-muted">
                                                    @producto.Producto.Codigo | @producto.Producto.Marca
                                                </small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="progress" style="height: 20px;">
                                            @{
                                                var porcentaje = Model.SucursalesDisponibles.Count > 0 
                                                    ? (double)producto.TotalSucursalesAsignadas / Model.SucursalesDisponibles.Count * 100 
                                                    : 0;
                                                var colorClase = porcentaje >= 80 ? "bg-success" : porcentaje >= 50 ? "bg-warning" : "bg-danger";
                                            }
                                            <div class="progress-bar @colorClase" style="width: @porcentaje%">
                                                <small class="text-white fw-bold">@producto.TotalSucursalesAsignadas/@Model.SucursalesDisponibles.Count</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="small">@producto.RangoPrecio</div>
                                        <small class="text-muted">Prom: $@producto.PrecioPromedio.ToString("F2")</small>
                                    </td>
                                    @foreach (var sucursal in Model.SucursalesDisponibles)
                                    {
                                        var asignacion = producto.AsignacionesPorSucursal.GetValueOrDefault(sucursal.Id);
                                        var estaAsignado = asignacion != null;
                                        
                                        <td class="text-center sucursal-cell">
                                            <div class="btn-group-vertical" role="group">
                                                <button type="button" 
                                                        class="btn btn-sm @(estaAsignado ? "btn-success" : "btn-outline-secondary") assignment-btn"
                                                        onclick="toggleAsignacion('producto', @producto.Producto.Id, @sucursal.Id, @(estaAsignado ? "false" : "true"))"
                                                        title="@(estaAsignado ? $"Asignado - ${asignacion.PrecioVenta:F2}" : "Sin asignar - Click para asignar")">
                                                    <i class="bi bi-@(estaAsignado ? "check-circle-fill" : "dash-circle")"></i>
                                                </button>
                                                <button type="button" 
                                                        class="btn btn-xs btn-outline-info mt-1" 
                                                        onclick="diagnosticar(@producto.Producto.Id, @sucursal.Id)"
                                                        title="Diagnóstico">
                                                    <i class="bi bi-bug" style="font-size: 8px;"></i>
                                                </button>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="bi bi-box display-4 text-muted"></i>
                    <h5 class="text-muted mt-2">No se encontraron productos</h5>
                </div>
            }
        </div>
    </div>
}

<!-- Matriz de Servicios -->
@if (Model.TipoVista == "servicios" || Model.TipoVista == "ambos")
{
    <div class="card mb-4">
        <div class="card-header">
            <i class="bi bi-scissors me-2"></i><strong>Matriz de Servicios (@Model.ServiciosMatriz.Count)</strong>
        </div>
        <div class="card-body p-0">
            @if (Model.ServiciosMatriz.Any())
            {
                <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                        <thead class="table-dark sticky-top">
                            <tr>
                                <th width="50px">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="selectAllServicios" onchange="toggleSelectAllServicios()">
                                    </div>
                                </th>
                                <th width="300px">Servicio</th>
                                <th width="120px">Cobertura</th>
                                <th width="150px">Rango Precio</th>
                                @foreach (var sucursal in Model.SucursalesDisponibles)
                                {
                                    <th width="80px" class="text-center sucursal-header" title="@sucursal.Name">
                                        <div class="sucursal-name">@(sucursal.Name?.Substring(0, Math.Min(8, sucursal.Name?.Length ?? 0)) ?? "N/A")</div>
                                        <small class="text-muted">@sucursal.Code</small>
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var servicio in Model.ServiciosMatriz)
                            {
                                <tr data-tipo="servicio" data-id="@servicio.Servicio.Id">
                                    <td>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input item-checkbox servicio-checkbox" 
                                                   value="@servicio.Servicio.Id">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-light rounded me-2 d-flex align-items-center justify-content-center" 
                                                 style="width: 30px; height: 30px;">
                                                <i class="bi bi-scissors text-primary small"></i>
                                            </div>
                                            <div>
                                                <div class="fw-bold small">@servicio.Servicio.Nombre</div>
                                                <small class="text-muted">
                                                    @servicio.Servicio.Codigo | @servicio.Servicio.DuracionFormateada
                                                </small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="progress" style="height: 20px;">
                                            @{
                                                var porcentaje = Model.SucursalesDisponibles.Count > 0 
                                                    ? (double)servicio.TotalSucursalesAsignadas / Model.SucursalesDisponibles.Count * 100 
                                                    : 0;
                                                var colorClase = porcentaje >= 80 ? "bg-success" : porcentaje >= 50 ? "bg-warning" : "bg-danger";
                                            }
                                            <div class="progress-bar @colorClase" style="width: @porcentaje%">
                                                <small class="text-white fw-bold">@servicio.TotalSucursalesAsignadas/@Model.SucursalesDisponibles.Count</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="small">@servicio.RangoPrecio</div>
                                        <small class="text-muted">Prom: $@servicio.PrecioPromedio.ToString("F2")</small>
                                    </td>
                                    @foreach (var sucursal in Model.SucursalesDisponibles)
                                    {
                                        var asignacion = servicio.AsignacionesPorSucursal.GetValueOrDefault(sucursal.Id);
                                        var estaAsignado = asignacion != null;
                                        
                                        <td class="text-center sucursal-cell">
                                            <div class="btn-group-vertical" role="group">
                                                <button type="button" 
                                                        class="btn btn-sm @(estaAsignado ? "btn-success" : "btn-outline-secondary") assignment-btn"
                                                        onclick="toggleAsignacion('servicio', @servicio.Servicio.Id, @sucursal.Id, @(estaAsignado ? "false" : "true"))"
                                                        title="@(estaAsignado ? $"Asignado - ${asignacion.PrecioLocal:F2}" : "Sin asignar - Click para asignar")">
                                                    <i class="bi bi-@(estaAsignado ? "check-circle-fill" : "dash-circle")"></i>
                                                </button>
                                                <button type="button" 
                                                        class="btn btn-xs btn-outline-info mt-1" 
                                                        onclick="diagnosticarServicio(@servicio.Servicio.Id, @sucursal.Id)"
                                                        title="Diagnóstico">
                                                    <i class="bi bi-bug" style="font-size: 8px;"></i>
                                                </button>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="bi bi-scissors display-4 text-muted"></i>
                    <h5 class="text-muted mt-2">No se encontraron servicios</h5>
                </div>
            }
        </div>
    </div>
}

<!-- Modal de Asignación Masiva -->
<div class="modal fade" id="asignacionMasivaModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-gear me-2"></i>Asignación Masiva
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="asignacionMasivaForm">
                    <input type="hidden" name="AccionMasiva" id="accionMasiva">
                    <input type="hidden" name="TipoMasivo" id="tipoMasivo">
                    <input type="hidden" name="SucursalIdMasivo" id="sucursalIdMasivo">
                    
                    <div class="mb-3">
                        <label class="form-label">Sucursal de destino:</label>
                        <select class="form-select" id="sucursalSelect" onchange="document.getElementById('sucursalIdMasivo').value = this.value">
                            @foreach (var sucursal in Model.SucursalesDisponibles)
                            {
                                <option value="@sucursal.Id">@sucursal.Name (@sucursal.Code)</option>
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Elementos seleccionados:</label>
                        <div class="border rounded p-2" style="max-height: 200px; overflow-y: auto;">
                            <div id="elementosSeleccionados"></div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info" id="resumenAccion"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="ejecutarAsignacionMasiva()">
                    <i class="bi bi-check-circle me-1"></i>Confirmar
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .sucursal-header {
            writing-mode: vertical-rl;
            text-orientation: mixed;
            min-width: 80px;
        }
        
        .sucursal-name {
            font-size: 0.75rem;
            font-weight: bold;
        }
        
        .assignment-btn {
            width: 100%;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            padding: 0;
        }
        
        .sucursal-cell {
            padding: 0.25rem !important;
        }
        
        .table-responsive {
            max-height: 70vh;
        }
        
        .progress {
            background-color: #e9ecef;
        }
    </style>
    
    <script>
        // Variables globales
        let elementosSeleccionados = new Set();

        // Función para actualizar contador
        function actualizarContador() {
            const count = document.querySelectorAll('.item-checkbox:checked').length;
            const contador = document.getElementById('contadorSeleccionados');
            const btnAsignar = document.getElementById('btnAsignar');
            const btnDesasignar = document.getElementById('btnDesasignar');
            
            contador.textContent = `${count} seleccionados`;
            
            // Habilitar/deshabilitar botones
            if (count === 0) {
                contador.className = 'badge bg-secondary fs-6 mb-2';
                btnAsignar.disabled = true;
                btnDesasignar.disabled = true;
                btnAsignar.innerHTML = '<i class="bi bi-plus-circle me-1"></i>Selecciona elementos primero';
                btnDesasignar.innerHTML = '<i class="bi bi-x-circle me-1"></i>Selecciona elementos primero';
            } else {
                contador.className = 'badge bg-success fs-6 mb-2';
                btnAsignar.disabled = false;
                btnDesasignar.disabled = false;
                btnAsignar.innerHTML = '<i class="bi bi-plus-circle me-1"></i>Asignación Masiva';
                btnDesasignar.innerHTML = '<i class="bi bi-x-circle me-1"></i>Desasignación Masiva';
            }
        }

        // Función para seleccionar todos los elementos visibles
        function seleccionarTodosVisible() {
            const checkboxes = document.querySelectorAll('.item-checkbox:not(:checked)');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
                elementosSeleccionados.add(checkbox.value);
            });
            actualizarContador();
        }

        // Función para limpiar selección
        function limpiarSeleccion() {
            const checkboxes = document.querySelectorAll('.item-checkbox:checked');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
                elementosSeleccionados.delete(checkbox.value);
            });
            
            // También limpiar los "select all"
            const selectAllProductos = document.getElementById('selectAllProductos');
            const selectAllServicios = document.getElementById('selectAllServicios');
            if (selectAllProductos) selectAllProductos.checked = false;
            if (selectAllServicios) selectAllServicios.checked = false;
            
            actualizarContador();
        }

        // Event listeners para checkboxes individuales
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('item-checkbox')) {
                if (e.target.checked) {
                    elementosSeleccionados.add(e.target.value);
                } else {
                    elementosSeleccionados.delete(e.target.value);
                }
                actualizarContador();
            }
        });

        async function toggleAsignacion(tipo, itemId, sucursalId, deberiaAsignar) {
            const formData = new FormData();
            // CORRECCIÓN: La lógica estaba invertida
            const accion = deberiaAsignar === 'true' ? 'asignar' : 'desasignar';
            formData.append('Accion', accion);
            formData.append('Tipo', tipo);
            formData.append('ItemId', itemId);
            formData.append('SucursalId', sucursalId);
            
            // Agregar token antifalsificación
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }
            
            // Log detallado en consola del navegador
            console.clear();
            console.log('%c?? INICIANDO ASIGNACIÓN', 'font-size: 14px; font-weight: bold; color: #007bff;');
            console.log('?? Parámetros enviados:', {
                deberiaAsignar: deberiaAsignar,
                accionCalculada: accion,
                tipo: tipo,
                itemId: itemId,
                sucursalId: sucursalId
            });
            
            try {
                // Mostrar indicador de carga en el botón
                const button = event.target.closest('button');
                const originalHTML = button.innerHTML;
                button.disabled = true;
                button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
                
                console.log('? Enviando petición al servidor...');
                
                const response = await fetch('?handler=AsignacionRapida', {
                    method: 'POST',
                    body: formData
                });
                
                console.log('?? Respuesta del servidor recibida:', {
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok
                });
                
                if (response.ok) {
                    const result = await response.json();
                    
                    console.log('?? Resultado parseado:', result);
                    
                    if (result.success) {
                        console.log('? ÉXITO: Operación completada');
                        console.log('?? Mensaje:', result.message);
                        console.log('?? Recargando página...');
                        
                        // Recargar la página para mostrar cambios
                        location.reload();
                    } else {
                        console.log('? FALLO: Operación no exitosa');
                        console.log('?? Mensaje de error:', result.message);
                        
                        // Mostrar alerta más detallada
                        const alertDiv = document.createElement('div');
                        alertDiv.className = 'alert alert-warning alert-dismissible fade show position-fixed';
                        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 350px;';
                        alertDiv.innerHTML = `
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Operación fallida:</strong><br>
                            <small>${result.message}</small><br>
                            <small class="text-muted">Ver detalles en consola (F12)</small>
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                        document.body.appendChild(alertDiv);
                        
                        // Auto-remover después de 8 segundos
                        setTimeout(() => {
                            if (alertDiv.parentNode) {
                                alertDiv.remove();
                            }
                        }, 8000);
                        
                        // Restaurar botón
                        button.disabled = false;
                        button.innerHTML = originalHTML;
                    }
                } else {
                    const errorText = await response.text();
                    console.error('?? ERROR HTTP:', errorText);
                    throw new Error(`Error HTTP ${response.status}: ${errorText}`);
                }
            } catch (error) {
                console.error('?? ERROR GENERAL:', error);
                
                // Mostrar error más detallado
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed';
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 350px;';
                alertDiv.innerHTML = `
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Error de conexión:</strong><br>
                    <small>${error.message}</small><br>
                    <small class="text-muted">Ver detalles en consola (F12)</small>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alertDiv);
                
                // Auto-remover después de 8 segundos
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 8000);
                
                // Restaurar botón
                const button = event.target.closest('button');
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="bi bi-' + (deberiaAsignar === 'true' ? 'dash-circle' : 'check-circle-fill') + '"></i>';
                }
            }
        }

        function toggleSelectAllProductos() {
            const selectAll = document.getElementById('selectAllProductos');
            const checkboxes = document.querySelectorAll('.producto-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
                if (selectAll.checked) {
                    elementosSeleccionados.add(checkbox.value);
                } else {
                    elementosSeleccionados.delete(checkbox.value);
                }
            });
            actualizarContador();
        }

        function toggleSelectAllServicios() {
            const selectAll = document.getElementById('selectAllServicios');
            const checkboxes = document.querySelectorAll('.servicio-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
                if (selectAll.checked) {
                    elementosSeleccionados.add(checkbox.value);
                } else {
                    elementosSeleccionados.delete(checkbox.value);
                }
            });
            actualizarContador();
        }

        function abrirAsignacionMasiva(accion) {
            const seleccionados = document.querySelectorAll('.item-checkbox:checked');
            
            if (seleccionados.length === 0) {
                // Mostrar alerta más amigable
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-warning alert-dismissible fade show position-fixed';
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                alertDiv.innerHTML = `
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>¡Atención!</strong> Debes seleccionar al menos un elemento usando los checkboxes de la izquierda.
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alertDiv);
                
                // Auto-remover después de 5 segundos
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
                
                return;
            }
            
            document.getElementById('accionMasiva').value = accion === 'asignar' ? 'asignar_todas' : 'desasignar_todas';
            
            // Determinar tipo predominante
            const productos = document.querySelectorAll('.producto-checkbox:checked').length;
            const servicios = document.querySelectorAll('.servicio-checkbox:checked').length;
            
            if (productos > 0 && servicios > 0) {
                alert('Por favor selecciona solo productos o solo servicios, no ambos.');
                return;
            }
            
            const tipo = productos > 0 ? 'productos' : 'servicios';
            document.getElementById('tipoMasivo').value = tipo;
            
            // Mostrar elementos seleccionados
            let html = '';
            seleccionados.forEach(checkbox => {
                const row = checkbox.closest('tr');
                const nombre = row.querySelector('.fw-bold').textContent;
                html += `<div class="small mb-1"> ${nombre}</div>`;
            });
            document.getElementById('elementosSeleccionados').innerHTML = html;
            
            // Resumen de acción
            const textoAccion = accion === 'asignar' ? 'asignar' : 'desasignar';
            document.getElementById('resumenAccion').innerHTML = 
                `<i class="bi bi-info-circle me-2"></i>Se ${textoAccion}án <strong>${seleccionados.length}</strong> ${tipo} a la sucursal seleccionada.`;
            
            // Configurar sucursal por defecto
            const sucursalSelect = document.getElementById('sucursalSelect');
            if (sucursalSelect.options.length > 0) {
                document.getElementById('sucursalIdMasivo').value = sucursalSelect.value;
            }
            
            const modal = new bootstrap.Modal(document.getElementById('asignacionMasivaModal'));
            modal.show();
        }

        async function ejecutarAsignacionMasiva() {
            const form = document.getElementById('asignacionMasivaForm');
            const formData = new FormData(form);
            
            // Agregar IDs seleccionados
            const seleccionados = document.querySelectorAll('.item-checkbox:checked');
            seleccionados.forEach(checkbox => {
                formData.append('ItemIds', checkbox.value);
            });
            
            try {
                const response = await fetch('?handler=AsignacionMasiva', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert('Error: ' + result.message);
                    }
                } else {
                    throw new Error('Error en la respuesta del servidor');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al ejecutar asignación masiva: ' + error.message);
            }
        }

        function exportarMatriz() {
            // Implementación futura para exportar la matriz a Excel/CSV
            alert('Función de exportación en desarrollo...');
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar tooltips
            const tooltips = document.querySelectorAll('[title]');
            tooltips.forEach(element => {
                new bootstrap.Tooltip(element);
            });
            
            // Inicializar contador
            actualizarContador();
            
            // Mostrar ayuda en consola
            console.log('?? Guía de Matriz Global:');
            console.log('1. ?? Usa los checkboxes para seleccionar elementos');
            console.log('2. ?? El contador muestra cuántos elementos tienes seleccionados');
            console.log('3. ?? Usa "Asignación Masiva" para asignar a una sucursal');
            console.log('4. ?? Usa "Desasignación Masiva" para quitar de una sucursal');
            console.log('5. ?? Los botones individuales permiten asignación rápida');
            console.log('6. ?? BOTÓN ?? para diagnóstico detallado de cada asignación');
        });
        
        async function diagnosticar(productoId, sucursalId) {
            const formData = new FormData();
            formData.append('ProductoId', productoId);
            formData.append('SucursalId', sucursalId);
            
            // Agregar token antifalsificación
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }
            
            try {
                const response = await fetch('?handler=Diagnostico', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        console.clear(); // Limpiar consola para mejor visibilidad
                        console.log('%c?? DIAGNÓSTICO COMPLETO', 'font-size: 16px; font-weight: bold; color: #007bff;');
                        console.log('%c?? PRODUCTO ID:', 'font-weight: bold; color: #28a745;', productoId);
                        console.log('%c?? SUCURSAL ID:', 'font-weight: bold; color: #28a745;', sucursalId);
                        console.log('%c?? TOTAL ASIGNACIONES ENCONTRADAS:', 'font-weight: bold; color: #ffc107;', result.diagnostico.totalAsignaciones);
                        
                        if (result.diagnostico.totalAsignaciones > 0) {
                            console.log('%c?? DETALLES DE ASIGNACIONES:', 'font-weight: bold; color: #17a2b8;');
                            result.diagnostico.asignaciones.forEach((asig, index) => {
                                console.log(`  ${index + 1}. ID: ${asig.id}`);
                                console.log(`     ? IsActive: ${asig.isActive}`);
                                console.log(`     ?? Disponible: ${asig.disponible}`);
                                console.log(`     ?? Precio: $${asig.precio}`);
                                console.log(`     ?? Creado: ${asig.createdAt}`);
                                console.log(`     ?? Actualizado: ${asignacion.updatedAt || 'Nunca'}`);
                                console.log('     ' + '?'.repeat(30));
                            });
                        } else {
                            console.log('%c? NO HAY ASIGNACIONES EN LA BASE DE DATOS', 'font-weight: bold; color: #dc3545;');
                        }
                        
                        // Diagnóstico visual adicional
                        const button = document.querySelector(`button[onclick*="toggleAsignacion('producto', ${productoId}, ${sucursalId}"]`);
                        const isVisuallyAssigned = button?.classList.contains('btn-success');
                        
                        console.log('%c?? ESTADO VISUAL:', 'font-weight: bold; color: #6f42c1;');
                        console.log('   Botón muestra como:', isVisuallyAssigned ? '?? ASIGNADO (verde)' : '? NO ASIGNADO (gris)');
                        
                        // Conclusión
                        if (result.diagnostico.totalAsignaciones === 0 && !isVisuallyAssigned) {
                            console.log('%c? ESTADO CORRECTO: Sin asignación en BD y botón gris', 'font-weight: bold; color: #28a745;');
                        } else if (result.diagnostico.totalAsignaciones > 0 && isVisuallyAssigned) {
                            console.log('%c? ESTADO CORRECTO: Con asignación en BD y botón verde', 'font-weight: bold; color: #28a745;');
                        } else {
                            console.log('%c?? INCONSISTENCIA DETECTADA:', 'font-weight: bold; color: #fd7e14;');
                            console.log('   BD dice:', result.diagnostico.totalAsignaciones > 0 ? 'ASIGNADO' : 'NO ASIGNADO');
                            console.log('   Visual dice:', isVisuallyAssigned ? 'ASIGNADO' : 'NO ASIGNADO');
                        }
                        
                        alert(`DIAGNÓSTICO COMPLETADO\n\nProducto: ${productoId} | Sucursal: ${sucursalId}\nAsignaciones en BD: ${result.diagnostico.totalAsignaciones}\n\n? Ver detalles completos en CONSOLA (F12)`);
                    }
                } else {
                    console.error('Error en diagnóstico:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('? Error en diagnóstico:', error);
            }
        }

        async function diagnosticarServicio(servicioId, sucursalId) {
            // Similar al diagnóstico de productos pero para servicios
            console.clear();
            console.log('%c?? DIAGNÓSTICO DE SERVICIO', 'font-size: 16px; font-weight: bold; color: #007bff;');
            console.log('%c?? SERVICIO ID:', 'font-weight: bold; color: #28a745;', servicioId);
            console.log('%c?? SUCURSAL ID:', 'font-weight: bold; color: #28a745;', sucursalId);
            console.log('%c?? Función de diagnóstico para servicios en desarrollo...', 'color: #ffc107;');
            
            alert(`DIAGNÓSTICO DE SERVICIO\n\nServicio: ${servicioId} | Sucursal: ${sucursalId}\n\n?? Funcionalidad en desarrollo\nUsa el diagnóstico de productos por ahora`);
        }
    </script>
}